name: 'Blue/Green Deployment'
description: 'Deploy applications using blue/green deployment strategy for both ECS and EC2'

permissions:
  id-token: write
  contents: read  

env:
  AWS_APP_DEPLOY_ROLE: github-actions-deploy-role

inputs:
  # Common parameters
  app-name:
    description: 'Name of the application being deployed'
    required: true  
  environment:
    description: 'Environment to deploy to (dev, staging, prod)'
    required: true
  aws-region:
    description: 'AWS region to deploy to'
    required: true    
  aws-account-id:
    description: 'AWS account ID to deploy to'
    required: true    
  desired-count:
    description: 'Desired count for the application'
    required: true      
  task-def-arn:
    description: 'ARN of the task definition (required for ECS deployment)'
    required: false  

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Fetch parameters from Parameter Store needed for Blue/Green Deploy
      id: get_parameters
      shell: bash
      run: |        

        param="/cavago/${{inputs.environment}}/${{ inputs.app-name}}/cluster-name"
        echo "Fetching parameter: $param"
        value=$(aws ssm get-parameter --name "$param" --with-decryption --query "Parameter.Value" --output text)
        echo "cluster-name=$value" >> $GITHUB_OUTPUT

        param="/cavago/${{inputs.environment}}/${{ inputs.app-name}}/service-A-name"
        echo "Fetching parameter: $param"
        value=$(aws ssm get-parameter --name "$param" --with-decryption --query "Parameter.Value" --output text)
        echo "service-A-name=$value" >> $GITHUB_OUTPUT

        param="/cavago/${{inputs.environment}}/${{ inputs.app-name}}/service-B-name"
        echo "Fetching parameter: $param"
        value=$(aws ssm get-parameter --name "$param" --with-decryption --query "Parameter.Value" --output text)
        echo "service-B-name=$value" >> $GITHUB_OUTPUT

        param="/cavago/${{inputs.environment}}/${{ inputs.app-name}}/subdomain"
        echo "Fetching parameter: $param"
        value=$(aws ssm get-parameter --name "$param" --with-decryption --query "Parameter.Value" --output text)
        echo "subdomain=$value" >> $GITHUB_OUTPUT        


    - name: Print input parameters
      shell: bash
      run: |        
        echo "AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}"
        echo "AWS_REGION: ${{ inputs.aws-region }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.2.1
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/${{ env.AWS_APP_DEPLOY_ROLE }}
        aws-region: ${{ inputs.aws-region }}

    - name: Validate Inputs
      shell: bash
      run: |        
        # Validate parameters

        if [ -z "${{ inputs.app-name }}" ] || [ -z "${{ inputs.environment }}" ] || \      
            [ -z "${{ inputs.aws-region }}" ] || [ -z "${{ inputs.aws-account-id }}" ] || \ 
            [ -z "${{ inputs.desired-count }}" ] || [ -z "${{ inputs.task-def-arn }}" ]; then
          echo "‚ùå Missing required parameters for ECS deployment"
          echo "Required parameters for ECS deployment:"
          echo "- app-name"
          echo "- environment"
          echo "- aws-region"
          echo "- aws-account-id"
          echo "- desired-count"
          echo "- task-def-arn"
          exit 1
        fi                  

    # ECS Deployment
    - name: ECS Deployment      
      shell: bash
      run: |
        "$GITHUB_ACTION_PATH/deploy-bluegreen-ecs.sh" "${{ inputs.app-name }}" "${{ inputs.environment }}" "${{ steps.get_parameters.outputs.cluster-name }}" \
          "${{ inputs.task-def-arn }}" \
          "${{ steps.get_parameters.outputs.service-A-name }}" \
          "${{ steps.get_parameters.outputs.service-B-name }}" \
          "${{ steps.get_parameters.outputs.subdomain }}" \
          "${{ inputs.desired-count }}"
