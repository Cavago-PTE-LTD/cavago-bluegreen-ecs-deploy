name: 'Blue/Green Deployment'
description: 'Deploy applications using blue/green deployment strategy for both ECS and EC2'

inputs:
  # Common parameters
  deployment-type:
    description: 'Type of deployment (ecs or ec2)'
    required: true  
  environment:
    description: 'Environment to deploy to (dev, staging, prod)'
    required: true
  aws-region:
    description: 'AWS region to deploy to'
    required: true    
  subdomain:
    description: 'Subdomain for the application'
    required: true  
  desired-count:
    description: 'Desired count for the application'
    required: true  
  # EC2 specific parameters
  asg-A:
    description: 'Name of the A Auto Scaling Group (required for EC2 deployment)'
    required: false
  asg-B:
    description: 'Name of the B Auto Scaling Group (required for EC2 deployment)'
    required: false
  launch-template-name:
    description: 'Name of the launch template (required for EC2 deployment)'
    required: false  
  launch-template-version:
    description: 'Version of the launch template (required for EC2 deployment)'
    required: false
  zip-file-path:
    description: 'Name of the ZIP file containing application code (required for EC2 deployment)'
    required: false  
  # ECS specific parameters
  cluster-name:
    description: 'Name of the ECS cluster (required for ECS deployment)'
    required: false
  task-def-arn:
    description: 'ARN of the task definition (required for ECS deployment)'
    required: false
  service-A-name:
    description: 'Name of the blue service (required for ECS deployment)'
    required: false
  service-B-name:  
    description: 'Name of the green service (required for ECS deployment)'
    required: false  

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.2.1
      with:
        aws-region: ${{ inputs.aws-region }}

    - name: Validate Inputs
      shell: bash
      run: |
        if [ "${{ inputs.deployment-type }}" = "ec2" ]; then
          # Validate EC2 specific parameters
          if [ -z "${{ inputs.environment }}" ] || [ -z "${{ inputs.listener-arn }}" ] || \
             [ -z "${{ inputs.target-group-A }}" ] || [ -z "${{ inputs.target-group-B }}" ] || \
             [ -z "${{ inputs.asg-A }}" ] || [ -z "${{ inputs.asg-B }}" ] || \
             [ -z "${{ inputs.subdomain }}" ] || \
             [ -z "${{ inputs.launch-template-name }}" ] || \
             [ -z "${{ inputs.launch-template-version }}" ] || \
             [ -z "${{ inputs.zip-file-path }}" ]; then             
            echo "❌ Missing required parameters for EC2 deployment"
            echo "Required parameters for EC2 deployment:"
            echo "- environment"
            echo "- listener-arn"
            echo "- target-group-A"
            echo "- target-group-B"
            echo "- asg-A"
            echo "- asg-B"
            echo "- launch-template-name"
            echo "- launch-template-version"
            echo "- zip-file-path"                        
            exit 1
          fi
        elif [ "${{ inputs.deployment-type }}" = "ecs" ]; then
          # Validate ECS specific parameters        

          if [ -z "${{ inputs.environment }}" ] || [ -z "${{ inputs.subdomain }}" ] || \      
             [ -z "${{ inputs.desired-count }}" ] || [ -z "${{ inputs.cluster-name }}" ] || \
             [ -z "${{ inputs.task-def-arn }}" ] || [ -z "${{ inputs.service-A-name }}" ] || \
             [ -z "${{ inputs.service-B-name }}" ]; then
            echo "❌ Missing required parameters for ECS deployment"
            echo "Required parameters for ECS deployment:"
            echo "- environment"
            echo "- subdomain"
            echo "- desired-count"
            echo "- cluster-name"
            echo "- task-def-arn"
            echo "- service-A-name"
            echo "- service-B-name"
            exit 1
          fi          
        else
          echo "❌ Invalid deployment type: ${{ inputs.deployment-type }}"
          echo "Supported deployment types: ecs, ec2"
          exit 1
        fi    

    # EC2 Deployment
    - name: Print working directory
      if: inputs.deployment-type == 'ec2'
      shell: bash
      run: |
        echo "Action directory: $GITHUB_ACTION_PATH"
        echo "Action directory contents:"
        ls -la "$GITHUB_ACTION_PATH"

    - name: EC2 Deployment
      if: inputs.deployment-type == 'ec2'
      shell: bash
      run: |
        "$GITHUB_ACTION_PATH/deploy-bluegreen-ec2.sh" \
          "${{ inputs.environment }}" \
          "${{ inputs.listener-arn }}" \
          "${{ inputs.target-group-A }}" \
          "${{ inputs.target-group-B }}" \
          "${{ inputs.asg-A }}" \
          "${{ inputs.asg-B }}" \
          "${{ inputs.subdomain }}" \
          "${{ inputs.launch-template-name }}" \
          "${{ inputs.launch-template-version }}" \          
          "${{ inputs.zip-file-path }}"

    # ECS Deployment
    - name: ECS Deployment
      if: inputs.deployment-type == 'ecs'
      shell: bash
      run: |
        "$GITHUB_ACTION_PATH/deploy-bluegreen-ecs.sh" \
          "${{ inputs.environment }}" \                    
          "${{ inputs.cluster-name }}" \
          "${{ inputs.task-def-arn }}" \
          "${{ inputs.service-A-name }}" \
          "${{ inputs.service-B-name }}" \
          "${{ inputs.subdomain }}" \
          "${{ inputs.desired-count }}"
